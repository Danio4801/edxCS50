{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs44 \cf0 	Variables and scope:\
Scope is characteristic of a variable that defines from which functions that variable can be accessed \
2 primary scopes in C:\
Local variables and Global variables \
Local variables can be accessed within the functions in which they were created \
Global variables can be accessed by any function in the program \
Local variables in C are passed by value in function calls. The callee receives a copy of the passed variable, not the variable itself. The variable in the caller is unchanged unless overwritten.\
\
We can compare 2 strings using == (equal) sign.\
\
\
	Arrays:\
We use arrays to hold values of the same data type at contiguous memory locations (eg. we can group bunch of int(s) together without having to give each one unique name.   \
Array declaration:\
Type name[size];\
Meaning:\
(Type of chosen variable) (name of array)[size(number of elements)], example: int student_grades[60]; double menu_price[20];bool truthtable[3]; \
\
Special syntax to fill array when declaring and initializing:\
bool truthtable[3] = \{false, true, true\}; \
In this case we DO NOT have to indicate the size of the array, example:\
bool truthtable[] = \{false, true, true\}; \
\
Multiple dimension arrays: \
example: bool battleship[10][10]; //it\'92s like 10x10 grid\
\
Array is not a variable so we can\'92t assign one array to the another using the assignment operator, if we want to do that we need to create loop and copy every single value. \
\
Variables in C are passed by value in function calls, array do not follow this rule, rather they are passed by reference. The callee (podmiot odbieraj\uc0\u261 cy) receives the actual array, not the copy (of it), so we need to be careful because for example function can \'93break\'94 the prestigious array.\
\
\
	Functions: \
- also called procedures , methods  (if object oriented) or subroutines. \
- function is a black box that has set 0+ inputs and 1 output.\
Why call it a black box?\
If we aren\'92t writing the functions ourselves, we don\'92t know (need to know) the underlying implementation.\
That\'92s part of the contract of using functions. We often can predict the behaviour based on that name.\
That\'92s also why the functions are well - documented and have obvious names. \
Why we use functions?\
- functions help break up complex problem into more manageable subpart\
- smaller components tend to be easier to design, implement and debug  \
\
How to write a function?\
\
First of all, we have to declare the function: \
(We are telling complier that function called (\'85) exists and can be used, simple heads up to the compiler)\
Functions declarations should be at the top of code, before main() and after included libraries.\
Standard of functions declaration:\
Return-type name of the function (argument list);\
example:\
int add_two_ints(int a, int b);\
\
\
Function definitions (We want to write the function):\
A function definition look almost identical to a function declaration, with a small change\
int add_two_ints(int a, int b)\
\{\
	int sum = a + b;\
	return sum;  //the function return something , its the output of the black box; give the result back;\
\}\
\
\
Function calls \
To call a function, simply pass it appropriate arguments and assign the return value to something of the correct type.\
example:\
	#include<cs50.h>\
\
	int add_two_ints(int a, int b); //function declaration\
\
	int main void()\
	\{\
		int x = 21;\
		int y = 5;\
		int z = add_two_ints(x, y); //function call \
	\}\
\
	int add_two_ints(int a, int b) //function definition  \
	\{\
		int sum = a + b;\
		return sum; \
	\}\
\
Sometimes the function can take no inputs. In that case, we declare the function as having a void argument list.\
Functions sometimes don\'92t have an output, in that case we declare function as having a void return type.\
 \
\
\
	Debugging (\'93Step into\'94):\
We have to choose the pause point (also called break point) , compile code and write in terminal: debug50 (filename without extension).\
Debug50 let us not only check code but also step inside functions and show us what\'92s going on under the function hood. \
\
\
	Command line arguments \
To enable collecting command line arguments from user we have to write:\
Int main(int argc, string argv[])\
\{\}\
We are passing 2 arguments (parameters) to main.\
argc is argument count while string argcv[] is an array of strings. (Argv means argument vector) (vector is just another word for the array)  \
How does argc works?\
Example:\
./numbers - 1 argument\
./numbers 1232 Daniel - 3 arguments \
\
!Everything in argv is stored as a strings, even 1232 in argv[1], it\'92s not an integer!\
}